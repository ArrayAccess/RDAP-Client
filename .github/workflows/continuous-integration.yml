name: Continuous Integration

# on specifies the event that triggers the workflow
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  runs-php81:
    strategy:
      matrix:
        php-version: [ 8.1 ]
    name: Running Code Execution PHP ${{ matrix.php-version }}
    runs-on: ubuntu-22.04
    steps:
      # Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v4

      # Cache Composer dependencies
      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      # Install PHP 8.1
      - name: Install Php ${{ matrix.php-version }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }} # Specify the PHP version you are using
          tools: composer:v2
          extensions: json, intl

      # Validate composer.json and composer.lock
      - name: Validate composer.json and composer.lock
        run: php $(which composer) validate --strict

      # Install Composer dependencies
      - name: Install Composer dependencies
        run: php $(which composer) install --no-interaction --no-progress --no-suggest

      # Run PHP Code Sniffer
      - name: Run PHP Code Sniffer
        run: php vendor/bin/phpcs --standard=phpcs.xml

      # Run PHPStan
      - name: Run PHPStan
        run: vendor/bin/phpstan --configuration=phpstan.neon

  runs-php82:
    strategy:
      matrix:
        php-version: [ 8.2 ]
    name: Running Code Execution PHP ${{ matrix.php-version }}
    runs-on: ubuntu-22.04
    steps:
      # Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v4

      # Cache Composer dependencies
      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      # Install PHP 8.2
      - name: Install Php ${{ matrix.php-version }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }} # Specify the PHP version you are using
          tools: composer:v2
          extensions: json, intl

      # Validate composer.json and composer.lock
      - name: Validate composer.json and composer.lock
        run: php $(which composer) validate --strict

      # Install Composer dependencies
      - name: Install Composer dependencies
        run: php $(which composer) install --no-interaction --no-progress --no-suggest

      # Run PHP Code Sniffer
      - name: Run PHP Code Sniffer
        run: php vendor/bin/phpcs --standard=phpcs.xml

      # Run PHPStan
      - name: Run PHPStan
        run: vendor/bin/phpstan --configuration=phpstan.neon

  runs-php83:
    strategy:
      matrix:
        php-version: [ 8.3 ]
    name: Running Code Execution PHP ${{ matrix.php-version }}
    runs-on: ubuntu-22.04
    steps:
      # Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v4

      # Cache Composer dependencies
      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      # Install PHP 8.3
      - name: Install Php ${{ matrix.php-version }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }} # Specify the PHP version you are using
          tools: composer:v2
          extensions: json, intl

      # Validate composer.json and composer.lock
      - name: Validate composer.json and composer.lock
        run: php $(which composer) validate --strict

      # Install Composer dependencies
      - name: Install Composer dependencies
        run: php $(which composer) install --no-interaction --no-progress --no-suggest

      # Run PHP Code Sniffer
      - name: Run PHP Code Sniffer
        run: php vendor/bin/phpcs --standard=phpcs.xml

      # Run PHPStan
      - name: Run PHPStan
        run: vendor/bin/phpstan --configuration=phpstan.neon

  runs-php84:
    strategy:
      matrix:
        php-version: [ 8.4 ]
    name: Running Code Execution PHP ${{ matrix.php-version }}
    runs-on: ubuntu-22.04
    steps:
      # Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v4

      # Cache Composer dependencies
      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      # Install PHP 8.4
      - name: Install Php ${{ matrix.php-version }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }} # Specify the PHP version you are using
          tools: composer:v2
          extensions: json, intl

      # Validate composer.json and composer.lock
      - name: Validate composer.json and composer.lock
        run: php $(which composer) validate --strict

      # Install Composer dependencies
      - name: Install Composer dependencies
        run: php $(which composer) install --no-interaction --no-progress --no-suggest

      # Run PHP Code Sniffer
      - name: Run PHP Code Sniffer
        run: php vendor/bin/phpcs --standard=phpcs.xml

      # Run PHPStan
      - name: Run PHPStan
        run: vendor/bin/phpstan --configuration=phpstan.neon
